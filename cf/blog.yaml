AWSTemplateFormatVersion: '2010-09-09'
Resources:
  blogS3:
    Type: "AWS::S3::Bucket"
    
  blogReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref blogS3
      PolicyDocument:
        Statement:
        - Action: 's3:GetObject'
          Effect: Allow
          Resource: !Sub 'arn:aws:s3:::${blogS3}/*'
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Identity for Blog S3 Bucket access from CloudFront

  blogRewriteLambda:
    #AWS-DOC http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
    Type: "AWS::Lambda::Function"
    Properties: 
      Code:
        ZipFile: |

          // from https://aws.amazon.com/blogs/compute/implementing-default-directory-indexes-in-amazon-s3-backed-amazon-cloudfront-origins-using-lambdaedge/
          'use strict';
          exports.handler = (event, context, callback) => {
              
              // Extract the request from the CloudFront event that is sent to Lambda@Edge 
              var request = event.Records[0].cf.request;

              // Extract the URI from the request
              var olduri = request.uri;

              // Match any '/' that occurs at the end of a URI. Replace it with a default index
              var newuri = olduri.replace(/\/$/, '\/index.html');
              
              // Log the URI as received by CloudFront and the new URI to be used to fetch from origin
              console.log("Old URI: " + olduri);
              console.log("New URI: " + newuri);
              
              // Replace the received URI with the URI that includes the index page
              request.uri = newuri;
              
              // Return to CloudFront
              return callback(null, request);

          };

      Description: "rewrite incoming requests to have index.html"
      FunctionName: Rewrite
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt blogRewriteLambdaRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 3
  blogRewriteLambdaVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: Because we have to specify an exact version of the lambda for CloudFront trigger
      FunctionName: !GetAtt blogRewriteLambda.Arn
  blogRewriteLambdaRole:
    #AWS-DOC http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com # note we need this since it's an edge lambda
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
  blogDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: CDN for equul.us blog
        CustomErrorResponses:
        - ErrorCode: 403 # not found
          ResponseCode: 404
          ResponsePagePath: "/error.html"
        DefaultCacheBehavior:
          TargetOriginId: blogOrigin
          ForwardedValues:
            QueryString: 'true'
          LambdaFunctionAssociations:
            - EventType: viewer-request
              IncludeBody: false
              LambdaFunctionARN: !Ref blogRewriteLambdaVersion
          ViewerProtocolPolicy: redirect-to-https
        Enabled: 'true'
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt blogS3.DomainName
            Id: blogOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: 'PriceClass_100'    
        DefaultRootObject: index.html
        Aliases:
        - equul.us
        # - !Join ['', [!Ref 'AWS::StackName', !Ref 'AWS::AccountId', ., !Ref 'AWS::Region',
        #     ., !Ref 'HostedZone']]
        ViewerCertificate:
          AcmCertificateArn: !ImportValue EquulusCertificate
          SslSupportMethod: 'sni-only'